Only in gnuplot-4.6.5/docs: gnuplot.pdf
Only in gnuplot-4.6.5/docs: pdffigures.tex
diff -rup gnuplot-4.6.5/src/pm3d.c gnuplot-4.6.5-new/src/pm3d.c
--- gnuplot-4.6.5/src/pm3d.c	2013-10-15 01:54:28.000000000 +0200
+++ gnuplot-4.6.5-new/src/pm3d.c	2014-03-17 16:15:40.367612976 +0100
@@ -18,6 +18,8 @@ static char *RCSid() { return RCSid("$Id
 # include "config.h"
 #endif
 #include "pm3d.h"
+#include "util3d.h"
+#include "getcolor.h"
 #include "alloc.h"
 #include "axis.h"
 #include "graphics.h"
@@ -400,7 +402,7 @@ void pm3d_depth_queue_flush(void)
 	for (qp = quadrangles, qe = quadrangles + current_quadrangle; qp != qe; qp++) {
 
 	    if (color_from_rgbvar)
-		set_rgbcolor(qp->gray);
+		set_rgbcolor((int)qp->gray);
 	    else
 		set_color(qp->gray);
 	    if (pm3d.hidden3d_tag < 0)
@@ -443,6 +445,9 @@ pm3d_plot(struct surface_points *this_pl
 
     /* just a shortcut */
     TBOOLEAN color_from_column = this_plot->pm3d_color_from_column;
+    TBOOLEAN color_from_normal = pm3d.which_corner_color == PM3D_COLOR_BY_NORMAL;
+    TBOOLEAN color_from_shade = pm3d.which_corner_color == PM3D_COLOR_BY_SHADE;
+    TBOOLEAN color_from_fixed_shade = pm3d.which_corner_color == PM3D_COLOR_BY_FIXED_SHADE;
     
     color_from_rgbvar = (this_plot->lp_properties.pm3d_color.type == TC_RGB
 			&&  this_plot->lp_properties.pm3d_color.value == -1);
@@ -679,7 +684,7 @@ pm3d_plot(struct surface_points *this_pl
 		   (note: log scale is already included). The average is calculated here
 		   if there is no interpolation (including the "pm3d depthorder" option),
 		   otherwise it is done for each interpolated quadrangle later.
-		   I always wonder what is faster: d*0.25 or d/4? Someone knows? -- 0.25 (joze) */
+		 */
 		if (color_from_column) {
 		    /* color is set in plot3d.c:get_3ddata() */
 		    cb1 = pointsA[i].CRD_COLOR;
@@ -715,9 +720,21 @@ pm3d_plot(struct surface_points *this_pl
 		    case PM3D_WHICHCORNER_C2: avgC = cb2; break;
 		    case PM3D_WHICHCORNER_C3: avgC = cb3; break;
 		    case PM3D_WHICHCORNER_C4: avgC = cb4; break;
+		    case PM3D_COLOR_BY_SHADE:  avgC = (cb1 + cb2 + cb3 + cb4) * 0.25; break; /* We'll get this later */
+		    case PM3D_COLOR_BY_FIXED_SHADE:  avgC = (cb1 + cb2 + cb3 + cb4) * 0.25; break; /* We'll get this later */
+		    case PM3D_COLOR_BY_NORMAL: break; /* We'll get this later */
 		}
 
-		if (color_from_rgbvar) /* we were given an explicit color */
+		if (color_from_normal)
+			gray = rgb_from_normal( &pointsA[i], &pointsA[i1],
+			       &pointsB[ii], &pointsB[ii1]);
+		else if (color_from_shade)
+			gray = rgb_from_shade( &pointsA[i], &pointsA[i1],
+			       &pointsB[ii], &pointsB[ii1], cb2gray(avgC), at_which_z, 0);
+		else if (color_from_fixed_shade)
+			gray = rgb_from_shade( &pointsA[i], &pointsA[i1],
+			       &pointsB[ii], &pointsB[ii1], cb2gray(avgC), at_which_z, 1);
+		else if (color_from_rgbvar) /* RGB color */
 			gray = avgC;
 		else /* transform z value to gray, i.e. to interval [0,1] */
 			gray = cb2gray(avgC);
@@ -729,8 +746,8 @@ pm3d_plot(struct surface_points *this_pl
 
 		/* set the color */
 		if (pm3d.direction != PM3D_DEPTH) {
-		    if (color_from_rgbvar)
-			set_rgbcolor(gray);
+		    if (color_from_rgbvar || color_from_normal || color_from_shade || color_from_fixed_shade )
+			set_rgbcolor((int)gray);
 		    else
 			set_color(gray);
 		}
@@ -891,10 +908,22 @@ pm3d_plot(struct surface_points *this_pl
 			    case PM3D_WHICHCORNER_C2: avgC = cb2; break;
 			    case PM3D_WHICHCORNER_C3: avgC = cb3; break;
 			    case PM3D_WHICHCORNER_C4: avgC = cb4; break;
+			    case PM3D_COLOR_BY_SHADE: avgC = (cb1 + cb2 + cb3 + cb4) * 0.25; break; /* We'll get this later */
+			    case PM3D_COLOR_BY_FIXED_SHADE: avgC = (cb1 + cb2 + cb3 + cb4) * 0.25; break; /* We'll get this later */
+			    case PM3D_COLOR_BY_NORMAL: break; /* We'll get this later */
 			    default: int_error(NO_CARET, "cannot be here"); avgC = 0;
 			}
 
-			if (color_from_rgbvar) /* we were given an explicit color */
+			if (color_from_normal)
+				gray = rgb_from_normal( &pointsA[i], &pointsA[i1],
+				       &pointsB[ii], &pointsB[ii1]);
+			else if (color_from_shade)
+				gray = rgb_from_shade( &pointsA[i], &pointsA[i1],
+				       &pointsB[ii], &pointsB[ii1], cb2gray(avgC), at_which_z, 0);
+			else if (color_from_fixed_shade)
+				gray = rgb_from_shade( &pointsA[i], &pointsA[i1],
+				       &pointsB[ii], &pointsB[ii1], cb2gray(avgC), at_which_z, 1);
+			else if (color_from_rgbvar) /* RGB color */
 				gray = avgC;
 			else /* transform z value to gray, i.e. to interval [0,1] */
 				gray = cb2gray(avgC);
@@ -908,7 +937,7 @@ pm3d_plot(struct surface_points *this_pl
 			    current_quadrangle++;
 			} else {
 			    if (color_from_rgbvar)
-				set_rgbcolor(gray);
+				set_rgbcolor((int) gray);
 			    else
 				set_color(gray);
 			    if (at_which_z == PM3D_AT_BASE)
@@ -956,7 +985,10 @@ filled_color_contour_plot(struct surface
 
     /* just a shortcut */
     TBOOLEAN color_from_column = this_plot->pm3d_color_from_column;
-
+    TBOOLEAN color_from_normal = pm3d.which_corner_color == PM3D_COLOR_BY_NORMAL;
+    TBOOLEAN color_from_shade = pm3d.which_corner_color == PM3D_COLOR_BY_SHADE;
+    TBOOLEAN color_from_fixed_shade = pm3d.which_corner_color == PM3D_COLOR_BY_FIXED_SHADE;
+    
     if (this_plot == NULL || this_plot->contours == NULL)
 	return;
     if (contours_where != CONTOUR_SRF && contours_where != CONTOUR_BASE)
@@ -1189,3 +1221,227 @@ is_plot_with_colorbox()
     return plot_has_palette && (color_box.where != SMCOLOR_BOX_NO);
 }
 
+/*
+ * Calculate surface normal of the tile defined by these vertices.
+ * Return an RGB color based on this normal.
+ * FIXME:  Move this to color.c ?
+ */
+int
+rgb_from_normal( struct coordinate *v0, struct coordinate *v1, 
+		 struct coordinate *v2, struct coordinate *v3 )
+{
+    double normal[3];
+    double normal1[3];
+    double normal2[3];
+    double t;
+    double phi;
+    double theta;
+    double psi;
+    int rgb;
+
+    psi = -DEG2RAD*surface_rot_z;
+    phi = -DEG2RAD*surface_rot_x;
+    
+    normal[0] = (v1->y-v0->y)*(v2->z-v0->z)*yscale3d*zscale3d - (v1->z-v0->z)*(v2->y-v0->y)*yscale3d*zscale3d;
+    normal[1] = (v1->z-v0->z)*(v2->x-v0->x)*xscale3d*zscale3d - (v1->x-v0->x)*(v2->z-v0->z)*xscale3d*zscale3d;
+    normal[2] = (v1->x-v0->x)*(v2->y-v0->y)*xscale3d*yscale3d - (v1->y-v0->y)*(v2->x-v0->x)*xscale3d*yscale3d ;
+    
+    t = sqrt( normal[0]*normal[0] + normal[1]*normal[1] + normal[2]*normal[2] );
+    normal[0] /= t;    
+    normal[1] /= t;    
+    normal[2] /= t;    
+   
+    normal1[0] =  cos(psi)*normal[0] -  sin(psi)*normal[1] + 0*normal[2];
+    normal1[1] =  sin(psi)*normal[0] +  cos(psi)*normal[1] + 0*normal[2];
+    normal1[2] =  0*normal[0] +                0*normal[1] + 1*normal[2];
+    
+    /*
+    normal2[0] =   cos(phi)*normal1[0] +         0*normal1[1] +  sin(phi)*normal1[2];
+    normal2[1] =          0*normal1[0] +         1*normal1[1] -         0*normal1[2];
+    normal2[2] =  -sin(phi)*normal1[0] +         0*normal1[1] +  cos(phi)*normal1[2];*/
+    
+    
+    normal[0] =  1*normal1[0] +         0*normal1[1] +         0*normal1[2];
+    normal[1] =  0*normal1[0] +  cos(phi)*normal1[1] -  sin(phi)*normal1[2];
+    normal[2] =  0*normal1[0] +  sin(phi)*normal1[1] +  cos(phi)*normal1[2];
+    
+    if (normal[2]<0.0) {
+    normal[0] *= -1.0;
+    normal[1] *= -1.0;
+    normal[2] *= -1.0;
+    }
+    
+ 
+    double base_r = 0.312;
+    double base_g = 0.188;
+    double base_b = 0.4;
+    
+    
+    double tmp_r = 1*(1.0/sqrt(2)*(normal[0]+normal[2])*0.8);
+    double tmp_g = 1*(1.0/sqrt(3)*(normal[0]+normal[1]+normal[2])*0.8);
+    double tmp_b = 1*(1.0/sqrt(2)*(normal[1]+normal[2])*0.8);
+
+/*
+    
+    double tmp_r = 0.63*(normal2[0]+normal2[2])*0.8 + base_r;
+    double tmp_g = 0.63*(normal2[0]+normal2[1]+normal2[2])*0.8 + base_g;
+    double tmp_b = 0.63*(normal2[1]+normal2[2])*0.8 + base_b;
+*/
+
+    if (tmp_r<0) tmp_r = 0;
+    if (tmp_g<0) tmp_g = 0;
+    if (tmp_b<0) tmp_b = 0;
+    
+    tmp_r += base_r;
+    tmp_g += base_g;
+    tmp_b += base_b;
+    
+    
+    if (tmp_r<0) tmp_r = 0;
+    if (tmp_g<0) tmp_g = 0;
+    if (tmp_b<0) tmp_b = 0;
+    if (tmp_r>1) tmp_r = 1;
+    if (tmp_g>1) tmp_g = 1;
+    if (tmp_b>1) tmp_b = 1;
+
+    rgb = ((unsigned char)(tmp_r*255.) << 16)
+        + ((unsigned char)(tmp_g*255.) <<  8)
+        + ((unsigned char)(tmp_b*255.));
+    
+    /*
+    rgb = ((unsigned char)(normal2[0]*127. + 128.5) << 16)
+        + ((unsigned char)(normal2[1]*127. + 128.5) <<  8)
+        + ((unsigned char)(normal2[2]*127. + 128.5))*/
+
+    return rgb;
+}
+
+
+/*
+ * Calculate surface normal of the tile defined by these vertices.
+ * Return an RGB color based on this normal AND the palette.
+ * FIXME:  Move this to color.c ?
+ */
+int
+rgb_from_shade( struct coordinate *v0, struct coordinate *v1, 
+		 struct coordinate *v2, struct coordinate *v3, double gray, int at_which_z, int opt_fixed  )
+{
+    double normal[3];
+    double normal1[3];
+    double normal2[3];
+    double light[3];
+    double reflect[3];
+    double t;
+    double phi;
+    double theta;
+    double psi;
+    int rgb;
+    struct t_sm_palette;
+    struct pm3d;
+
+    rgb_color color;
+    rgb1_from_gray( gray, &color );
+    
+    double r = color.r;
+    double g = color.g;
+    double b = color.b;	   
+
+    if (at_which_z != PM3D_AT_SURFACE)
+    rgb = ((unsigned char)((r)*255.) << 16)
+        + ((unsigned char)((g)*255.) <<  8)
+        + ((unsigned char)((b)*255.));
+    else {
+
+
+    psi = -DEG2RAD*(surface_rot_z);
+    phi = -DEG2RAD*(surface_rot_x);
+    theta = 0;
+    
+    normal[0] = (v1->y-v0->y)*(v2->z-v0->z)*yscale3d*zscale3d - (v1->z-v0->z)*(v2->y-v0->y)*yscale3d*zscale3d;
+    normal[1] = (v1->z-v0->z)*(v2->x-v0->x)*xscale3d*zscale3d - (v1->x-v0->x)*(v2->z-v0->z)*xscale3d*zscale3d;
+    normal[2] = (v1->x-v0->x)*(v2->y-v0->y)*xscale3d*yscale3d - (v1->y-v0->y)*(v2->x-v0->x)*xscale3d*yscale3d ;
+    
+    t = sqrt( normal[0]*normal[0] + normal[1]*normal[1] + normal[2]*normal[2] );
+    
+    normal[0] /= t;    
+    normal[1] /= t;    
+    normal[2] /= t;    
+    
+    if ( opt_fixed == 0 ) {
+   
+    normal1[0] =  cos(psi)*normal[0] -  sin(psi)*normal[1] + 0*normal[2];
+    normal1[1] =  sin(psi)*normal[0] +  cos(psi)*normal[1] + 0*normal[2];
+    normal1[2] =  0*normal[0] +                0*normal[1] + 1*normal[2];
+    
+    /*
+    normal2[0] =   cos(phi)*normal1[0] +         0*normal1[1] +  sin(phi)*normal1[2];
+    normal2[1] =          0*normal1[0] +         1*normal1[1] -         0*normal1[2];
+    normal2[2] =  -sin(phi)*normal1[0] +         0*normal1[1] +  cos(phi)*normal1[2];*/
+    
+    
+    normal[0] =  1*normal1[0] +         0*normal1[1] +         0*normal1[2];
+    normal[1] =  0*normal1[0] +  cos(phi)*normal1[1] -  sin(phi)*normal1[2];
+    normal[2] =  0*normal1[0] +  sin(phi)*normal1[1] +  cos(phi)*normal1[2];
+
+    }
+    
+    if (normal[2]<0.0) {
+    normal[0] *= -1.0;
+    normal[1] *= -1.0;
+    normal[2] *= -1.0;
+    }
+    
+    
+    light[0] = cos(-DEG2RAD*pm3d.shade_rot_x)*cos(-(DEG2RAD*pm3d.shade_rot_z+90));
+    light[2] = cos(-DEG2RAD*pm3d.shade_rot_x)*sin(-(DEG2RAD*pm3d.shade_rot_z+90));
+    light[1] = sin(-DEG2RAD*pm3d.shade_rot_x);
+    
+    double dot_prod = normal[0]*light[0] + normal[1]*light[1] + normal[2]*light[2];
+    double shade_fact = dot_prod*-1;
+    if (shade_fact<0.0) shade_fact = 0.0;
+    
+    double tmp_r;
+    double tmp_g;
+    double tmp_b;
+    
+    tmp_r = r*(pm3d.shade_ambient-pm3d.shade_strength+shade_fact*pm3d.shade_strength);
+    tmp_g = g*(pm3d.shade_ambient-pm3d.shade_strength+shade_fact*pm3d.shade_strength);
+    tmp_b = b*(pm3d.shade_ambient-pm3d.shade_strength+shade_fact*pm3d.shade_strength);
+    
+    if (pm3d.shade_spec>0.0) {
+    
+    reflect[0] = -light[0]+2*dot_prod*normal[0];
+    reflect[1] = -light[1]+2*dot_prod*normal[1];
+    reflect[2] = -light[2]+2*dot_prod*normal[2];
+    t = sqrt( reflect[0]*reflect[0] + reflect[1]*reflect[1] + reflect[2]*reflect[2] );
+    reflect[0] *= 1.0/t;
+    reflect[1] *= 1.0/t;
+    reflect[2] *= 1.0/t;
+    
+    dot_prod = -reflect[2];
+    if (dot_prod<0.0) dot_prod = 0;
+    double sqrt_pi = 1.7725;
+    double spec_fact = pow(dot_prod,pm3d.shade_shiny)/sqrt_pi*gamma(1+pm3d.shade_shiny)/gamma(0.5+pm3d.shade_shiny);   
+  
+
+    tmp_r += pm3d.shade_spec*spec_fact;
+    tmp_g += pm3d.shade_spec*spec_fact;
+    tmp_b += pm3d.shade_spec*spec_fact;
+        
+    }
+
+    if (tmp_r<0) tmp_r = 0;
+    if (tmp_g<0) tmp_g = 0;
+    if (tmp_b<0) tmp_b = 0;
+    if (tmp_r>1) tmp_r = 1;
+    if (tmp_g>1) tmp_g = 1;
+    if (tmp_b>1) tmp_b = 1;
+    
+    rgb = ((unsigned char)((tmp_r)*255.) << 16)
+        + ((unsigned char)((tmp_g)*255.) <<  8)
+        + ((unsigned char)((tmp_b)*255.));
+
+    }
+    
+    return rgb;
+}
diff -rup gnuplot-4.6.5/src/pm3d.h gnuplot-4.6.5-new/src/pm3d.h
--- gnuplot-4.6.5/src/pm3d.h	2010-10-07 01:20:50.000000000 +0200
+++ gnuplot-4.6.5-new/src/pm3d.h	2014-03-17 16:14:00.795658163 +0100
@@ -92,7 +92,10 @@ typedef enum {
     PM3D_WHICHCORNER_GEOMEAN = 5, /* geometrical mean of 4 corners */
     PM3D_WHICHCORNER_MEDIAN  = 6, /* median of 4 corners */
     PM3D_WHICHCORNER_MIN     = 7, /* minimum of 4 corners */
-    PM3D_WHICHCORNER_MAX     = 8  /* maximum of 4 corners */
+    PM3D_WHICHCORNER_MAX     = 8, /* maximum of 4 corners */
+    PM3D_COLOR_BY_NORMAL     = 9, /* defive color from surface normal */
+    PM3D_COLOR_BY_SHADE      = 10, /* defive color from surface normal AND palette (mean) */
+    PM3D_COLOR_BY_FIXED_SHADE  = 11 /* defive color from surface normal AND palette (mean) WITH fixed angle relative to axes */
 } PM3D_WHICH_CORNERS2COLOR;
 
 /*
@@ -114,6 +117,12 @@ typedef struct {
 			/* default: average color from all 4 points */
   int interp_i;		/* # of interpolation steps along scanline */
   int interp_j;		/* # of interpolation steps between scanlines */
+  int shade_rot_z;
+  int shade_rot_x;
+  double shade_strength;
+  double shade_spec;
+  double shade_shiny;
+  double shade_ambient;
 } pm3d_struct;
 
 
diff -rup gnuplot-4.6.5/src/set.c gnuplot-4.6.5-new/src/set.c
--- gnuplot-4.6.5/src/set.c	2014-01-27 18:07:53.000000000 +0100
+++ gnuplot-4.6.5-new/src/set.c	2014-03-17 16:16:21.363711444 +0100
@@ -181,6 +181,7 @@ static struct position default_position
 
 #ifdef BACKWARDS_COMPATIBLE
 static void set_nolinestyle __PROTO((void));
+static char *fill_numbers_into_string __PROTO((char *pattern));
 #endif
 
 /******** The 'set' command ********/
@@ -1800,6 +1801,15 @@ set_key()
     }
 #endif
 
+#ifdef BACKWARDS_COMPATIBLE
+    if (END_OF_COMMAND) {
+	free(key->font);
+	reset_key();
+	if (interactive)
+	    int_warn(c_token, "deprecated syntax, use \"set key default\"");
+    }
+#endif
+
     while (!END_OF_COMMAND) {
 	switch(lookup_table(&set_key_tbl[0],c_token)) {
 	case S_KEY_ON:
@@ -3527,8 +3537,121 @@ set_pm3d()
 		    pm3d.which_corner_color = PM3D_WHICHCORNER_C3;
 		else if (equals(c_token, "c4"))
 		    pm3d.which_corner_color = PM3D_WHICHCORNER_C4;
+				else if (equals(c_token, "normal"))
+		    pm3d.which_corner_color = PM3D_COLOR_BY_NORMAL;
+		else if (equals(c_token, "shade")) { /*read for strength, rot_z, and rot_x*/
+		
+		    pm3d.which_corner_color = PM3D_COLOR_BY_SHADE;
+		    pm3d.shade_rot_z = -45;
+		    pm3d.shade_rot_x = 45;
+		    pm3d.shade_strength = 0.5;
+		    pm3d.shade_spec = 0.0;
+		    pm3d.shade_shiny = 5.0;
+		    pm3d.shade_ambient = 1.0;
+
+        int i;
+        double r;
+        char * formerr = "shade parameters out of range (use `show pm3d corners2color shade' to display the range)";
+ 
+        c_token++;
+        if (END_OF_COMMAND) 
+          continue;
+        else {
+          r = real_expression();
+          pm3d.shade_strength = r;
+          if (!equals(c_token--,","))
+              continue;
+          c_token += 2;
+        }
+        
+        
+        r = real_expression();
+        pm3d.shade_ambient = r;
+        if (!equals(c_token--,","))
+            continue;
+        c_token += 2;
+        
+        r = real_expression();
+        pm3d.shade_spec = r;
+        if (!equals(c_token--,","))
+            continue;
+        c_token += 2;
+        
+        r = real_expression();
+        pm3d.shade_shiny = r;
+        if (!equals(c_token--,","))
+            continue;
+        c_token += 2;
+        
+        i = int_expression();
+        pm3d.shade_rot_z = i;
+        if (!equals(c_token--,","))
+            continue;
+        c_token += 2;
+        
+        i = int_expression();
+        pm3d.shade_rot_x = i;
+        if (!equals(c_token--,","))
+            continue;
+        c_token--;
+    }else if (equals(c_token, "fixedshade")) { /*read for strength, rot_z, and rot_x*/
+		
+		    pm3d.which_corner_color = PM3D_COLOR_BY_FIXED_SHADE;
+		    pm3d.shade_rot_z = -45;
+		    pm3d.shade_rot_x = -45;
+		    pm3d.shade_strength = 0.5;
+		    pm3d.shade_spec = 0.0;
+		    pm3d.shade_shiny = 5.0;
+		    pm3d.shade_ambient = 1.0;
+
+        int i;
+        double r;
+        char * formerr = "shade parameters out of range (use `show pm3d corners2color shade' to display the range)";
+ 
+        c_token++;
+        if (END_OF_COMMAND) 
+          continue;
+        else {
+          r = real_expression();
+          pm3d.shade_strength = r;
+          if (!equals(c_token--,","))
+              continue;
+          c_token += 2;
+        }
+        
+        
+        r = real_expression();
+        pm3d.shade_ambient = r;
+        if (!equals(c_token--,","))
+            continue;
+        c_token += 2;
+        
+        r = real_expression();
+        pm3d.shade_spec = r;
+        if (!equals(c_token--,","))
+            continue;
+        c_token += 2;
+        
+        r = real_expression();
+        pm3d.shade_shiny = r;
+        if (!equals(c_token--,","))
+            continue;
+        c_token += 2;
+        
+        i = int_expression();
+        pm3d.shade_rot_z = i;
+        if (!equals(c_token--,","))
+            continue;
+        c_token += 2;
+        
+        i = int_expression();
+        pm3d.shade_rot_x = -i;
+        if (!equals(c_token--,","))
+            continue;
+        c_token--;
+    }
 		else
-		    int_error(c_token,"expecting 'mean', 'geomean', 'median', 'min', 'max', 'c1', 'c2', 'c3' or 'c4'");
+		    int_error(c_token,"expecting 'mean', 'geomean', 'median', 'min', 'max', 'c1', 'c2', 'c3' or 'c4'. Experimental modes: 'normal', 'shade', and 'fixedshade'");
 		continue;
 	    } /* switch over pm3d lookup table */
 	    int_error(c_token,"invalid pm3d option");
@@ -5056,6 +5179,16 @@ set_tic_prop(AXIS_INDEX axis)
 	    }
 	}
 
+#ifdef BACKWARDS_COMPATIBLE
+	/* HBB 20001021: new functionality. If next token is a ','
+	 * treat it as a numeric expression whose value is to be
+	 * sprintf()ed into the label string (which contains an
+	 * appropriate %f format string) */
+	/* EAM Oct 2004 - this is superseded by general string variable
+	 * handling, but left in for backward compatibility */
+	if (!END_OF_COMMAND && equals(c_token, ","))
+	    this_label->text = fill_numbers_into_string(this_label->text);
+#endif
     }
 
     if (almost_equals(c_token, nocmd)) {	/* NOSTRING */
@@ -5468,6 +5601,12 @@ load_tic_series(AXIS_INDEX axis)
 	    start = end + numtics * incr;
 	    incr = -incr;
 	}
+#ifdef BACKWARDS_COMPATIBLE
+	if (isanumber(c_token) || equals(c_token, "-")) {
+	    /* Parse offset with missing keyword "set xlabel 'foo' 1,2 "*/
+	    get_position_default(&(label->offset),character);
+	}
+#endif
     }
 
     if (!tdef->def.mix) { /* remove old list */
@@ -5600,6 +5739,102 @@ fill_numbers_into_string(char *pattern)
     return output;
 }
 
+#ifdef BACKWARDS_COMPATIBLE
+/*
+ * Backwards compatibility ...
+ */
+static void set_nolinestyle()
+{
+    struct linestyle_def *this, *prev;
+    int tag;
+
+    if (END_OF_COMMAND) {
+	/* delete all linestyles */
+	while (first_linestyle != NULL)
+	    delete_linestyle(&first_linestyle, NULL, first_linestyle);
+    } else {
+	/* get tag */
+	tag = int_expression();
+	if (!END_OF_COMMAND)
+	    int_error(c_token, "extraneous arguments to set nolinestyle");
+	for (this = first_linestyle, prev = NULL;
+	     this != NULL;
+	     prev = this, this = this->next) {
+	    if (this->tag == tag) {
+		delete_linestyle(&first_linestyle, prev, this);
+		return;         /* exit, our job is done */
+	    }
+	}
+	int_error(c_token, "linestyle not found");
+    }
+}
+#endif
+
+#ifdef BACKWARDS_COMPATIBLE
+/* HBB 20001021: new function: make label texts decoratable with numbers */
+static char *
+fill_numbers_into_string(char *pattern)
+{
+    size_t pattern_length = strlen(pattern) + 1;
+    size_t newlen = pattern_length;
+    char *output = gp_alloc(newlen, "fill_numbers output buffer");
+    size_t output_end = 0;
+
+    do {			/* loop over string/value pairs */
+	double value;
+
+	if (isstring(++c_token)) {
+	    free(output);
+	    free(pattern);
+	    int_error(c_token, "constant expression expected");
+	}
+
+	/* assume it's a numeric expression, concatenate it to output
+	 * string: parse value, enlarge output buffer, and gprintf()
+	 * it. */
+	value = real_expression();
+	newlen += pattern_length + 30;
+	output = gp_realloc(output, newlen, "fill_numbers next number");
+	gprintf(output + output_end, newlen - output_end,
+		pattern, 1.0, value);
+	output_end += strlen(output + output_end);
+
+	/* allow a string to follow, after another comma: */
+	if (END_OF_COMMAND || !equals(c_token, ",")) {
+	    /* no comma followed the number --> we're done. Jump out
+	     * directly, as falling out of the while loop means
+	     * something slightly different. */
+	    free(pattern);
+	    return output;
+	}
+	c_token++;
+
+	if (!END_OF_COMMAND && isstring(c_token)) {
+	    size_t length = token_len(c_token);
+
+	    if (length >= pattern_length)
+		pattern = gp_realloc(pattern, pattern_length = length,
+				     "fill_numbers resize pattern");
+	    quote_str(pattern, c_token, length);
+	    c_token++;
+	} else {
+	    free(pattern);
+	    free(output);
+	    int_error(c_token, "string expected");
+	} /* if (string after comma) */
+    } while (!END_OF_COMMAND && equals(c_token, ","));
+
+    /* came out here --> the last element was a string, not a number.
+     * that means that there is a string in pattern which was not yet
+     * copied to 'output' */
+    output = gp_realloc(output, newlen += pattern_length,
+			"fill_numbers closing");
+    strcpy(output + output_end, pattern);
+    free(pattern);
+    return output;
+}
+#endif
+
 /*
  * new_text_label() allocates and initializes a text_label structure.
  * This routine is also used by the plot and splot with labels commands.
